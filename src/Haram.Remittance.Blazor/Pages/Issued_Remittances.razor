@page "/remittances/drafts"
@using Haram.Remittance.Remittances 
@using Haram.Remittance.Localization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.Remittance.Blazor.Pages
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Haram.Remittance.Permissions;
@using Blazorise;
@using Blazorise.DataGrid;
@using Microsoft.AspNetCore.Authorization;
@using Volo.Abp.Application.Dtos;
@using Haram.Remittance.Customers
@using Haram.Remittance.Currencies
@inherits RemittanceComponentBase
@inject IRemittanceAppService RemittanceAppService
@inject ICustomerAppService CustomerAppService
@inject ICurrencyAppService CurrencyAppService
@inject AbpBlazorMessageLocalizerHelper<RemittanceResource> LH
@inject IUiMessageService _uiMessageService

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Remittances.drafts"]</h2>
            </Column>
            @if (CanCreateDrafts)
            {
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="Color.Primary"
                        Clicked="OpenCreateModal">
                    @L["NewRemittance"]
                </Button>
            </Column>
            }
        </Row>
    </CardHeader>
    <CardBody>  
        <DataGrid TItem="RemittanceDto"
                  Data="RemittanceList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditDrafts)
                                {
                                    <DropdownItem Clicked="() => OpenEditModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteDrafts)
                                {
                                    <DropdownItem Clicked="() => DeleteRemittanceAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                                @if (CanSetAsReadyDrafts)
                                {
                                    <DropdownItem Clicked="() => SetRemittanceAsReadyAsync(context)">
                                        @L["SetAsReady"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption="@L["RemittanceType"]">
                    <DisplayTemplate>
                        @L[$"Enum:Remittance.Type.{context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.SerialNumber)"
                                Caption="@L["SerialNumber"]">
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption="@L["Amount"]">
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.TotalAmount)"
                                Caption="@L["TotalAmount"]">
                </DataGridColumn>
               
                 <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                 </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.SenderFullName)"
                                Caption="@L["SenderFullName"]">
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="CreateRemittanceModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        @if (NewRemittance != null){
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewRemittance"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewRemittance" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Type"]</FieldLabel>
                                <Select TValue="RemmitanceType" @bind-SelectedValue="@NewRemittance.Type">
                                    @foreach (int RemittanceTypeValue in Enum.GetValues(typeof(RemmitanceType)))
                                {
                                    <SelectItem TValue="RemmitanceType" Value="@((RemmitanceType) RemittanceTypeValue)">
                                        @L[$"Enum:Remittance.Type.{RemittanceTypeValue}"]
                                    </SelectItem>
                                }
                            </Select>

                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["SerialNumber"]</FieldLabel>
                                <TextEdit @bind-Text="@NewRemittance.SerialNumber">
                                    
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                              </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["Amount"]</FieldLabel>
                                <NumericEdit TValue="float" @bind-Value="@NewRemittance.Amount">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["ReceiverName"]</FieldLabel>
                                    <TextEdit @bind-Text="@NewRemittance.ReceiverName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>@L["ReceiverPhone"]</FieldLabel>
                                    <TextEdit @bind-Text="@NewRemittance.ReceiverPhone">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                           <Field>
                                    <FieldLabel>@L["Sender"]</FieldLabel>
                                    <Select TValue="Guid" @bind-SelectedValue="@NewRemittance.SenderId">
                                        <SelectItem Disabled>
                                            -- Select Sender --
                                        </SelectItem>
                                            @if (CustomersList.Count() > 0){
                                                @foreach (var customer in CustomersList)
                                                {
                                                    <SelectItem TValue="Guid" Value="@customer.Id">
                                                        @customer.FirstName @customer.LastName
                                                    </SelectItem>
                                                }
                                            }
                                    </Select>
                            <ValidationMessage For="@(() => NewRemittance.SenderId)" />
                           </Field>
                    </Validation> 
                    <Validation MessageLocalizer="@LH.Localize">
                         <Field>
                            <FieldLabel>@L["Currency"]</FieldLabel>
                                <Select TValue="Guid" @bind-SelectedValue="@NewRemittance.CurrencyId">
                                    <SelectItem Disabled>
                                    -- Select Currency --
                                    </SelectItem>
                                    @if (NewRemittance != null && NewRemittance.Type != null && NewRemittance.Type == RemmitanceType.Internal)
                                    {
                                        @if (CurrenciesList.Count() > 0)
                                        {
                                            <SelectItem TValue="Guid" Value="@CurrenciesList.FirstOrDefault(c => c.Name == "SYP").Id">
                                                @CurrenciesList.FirstOrDefault(c => c.Name == "SYP")?.Name
                                            </SelectItem>
                                        }
                                        else
                                        {
                                            <p>Loading currencies...</p>
                                        }
                                    }
                                    else
                                    {
                                        @if (CurrenciesList.Count() > 0)
                                        {
                                            @foreach (var currency in CurrenciesList.Where(c => c.Name != "SYP"))
                                            {
                                                <SelectItem TValue="Guid" Value="@currency.Id">
                                                    @currency.Name
                                                </SelectItem>
                                            }
                                        }
                                        else
                                        {
                                            <p>Loading currencies...</p>
                                        }
                                    }
                                </Select>  
                          @* <Select TValue="Guid" @bind-SelectedValue="@NewRemittance.CurrencyId">
                                    @foreach (var currency in CurrenciesList)
                                {
                                    <SelectItem TValue="Guid" Value="@currency.Id">
                                        @currency.Name @currency.Symbol
                                    </SelectItem>
                                }
                            </Select>  *@
                            <ValidationMessage For="@(() => NewRemittance.CurrencyId)" />
                         </Field>
                    </Validation> 
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateRemittanceAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
        }
    </ModalContent>
</Modal> 

<Modal @ref="EditRemittanceModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        @if (EditingRemittance != null)
        {
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingRemittance.SerialNumber</ModalTitle>
                <CloseButton Clicked="CloseCreateModal" />
            </ModalHeader>
            <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@EditingRemittance" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Type"]</FieldLabel>
                                <Select TValue="RemmitanceType" @bind-SelectedValue="@EditingRemittance.Type" >
                                    @foreach (int RemittanceTypeValue in Enum.GetValues(typeof(RemmitanceType)))
                                {
                                    <SelectItem TValue="RemmitanceType" Value="@((RemmitanceType) RemittanceTypeValue)">
                                        @L[$"Enum:Remittance.Type.{RemittanceTypeValue}"]
                                    </SelectItem>
                                }
                            </Select>

                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["SerialNumber"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingRemittance.SerialNumber">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                              </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["Amount"]</FieldLabel>
                                <NumericEdit TValue="float" @bind-Value="@EditingRemittance.Amount">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericEdit>
                        </Field>
                    </Validation>
                            <Validation MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>@L["ReceiverName"]</FieldLabel>
                                    <TextEdit @bind-Text="@EditingRemittance.ReceiverName">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                            <Validation MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>@L["ReceiverPhone"]</FieldLabel>
                                    <TextEdit @bind-Text="@EditingRemittance.ReceiverPhone">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Sender"]</FieldLabel >
                                <Select TValue="Guid" @bind-SelectedValue="@EditingRemittance.SenderId">
                                    @if (CustomersList.Count() > 0)
                                {
                                    @foreach (var customer in CustomersList)
                                    {
                                        <SelectItem TValue="Guid" Value="@customer.Id">
                                            @customer.FirstName @customer.LastName
                                        </SelectItem>
                                    }

                                }
                            </Select>
                            <ValidationMessage For="@(() => EditingRemittance.SenderId)" />
                        </Field>    
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Currency"]</FieldLabel>
                                <Select TValue="Guid" @bind-SelectedValue="@EditingRemittance.CurrencyId">
                                    <SelectItem Disabled>
                                    -- Select Currency --
                                </SelectItem>
                                @if (EditingRemittance != null && EditingRemittance.Type != null && EditingRemittance.Type == RemmitanceType.Internal)
                                {
                                    @if (CurrenciesList.Count() > 0)
                                    {
                                        <SelectItem TValue="Guid" Value="@CurrenciesList.FirstOrDefault(c => c.Name == "SYP").Id">
                                            @CurrenciesList.FirstOrDefault(c => c.Name == "SYP")?.Name
                                        </SelectItem>
                                    }
                                    else
                                    {
                                        <p>Loading currencies...</p>
                                    }
                                }
                                else
                                {
                                    @if (CurrenciesList.Count() > 0)
                                    {
                                        @foreach (var currency in CurrenciesList.Where(c => c.Name != "SYP"))
                                        {
                                            <SelectItem TValue="Guid" Value="@currency.Id">
                                                @currency.Name
                                            </SelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <p>Loading currencies...</p>
                                    }
                                }
                            </Select> 
                            @*  <Select TValue="Guid" @bind-SelectedValue="@NewRemittance.CurrencyId" >
                                    @foreach (var currency in CurrenciesList)
                                {
                                    <SelectItem TValue="Guid" Value="@currency.Id">
                                        @currency.Name @currency.Symbol
                                    </SelectItem>
                                }
                                </Select> *@
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateRemittanceAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
        }
    </ModalContent>
</Modal> 

@code {

    private IReadOnlyList<RemittanceDto> RemittanceList { get; set; }
    private List<CustomerDto> CustomersList { get; set; } = new List<CustomerDto>();
    private List<CurrencyDto> CurrenciesList { get; set; } = new List<CurrencyDto>();
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private bool CanCreateDrafts { get; set; } = true;
    private bool CanEditDrafts { get; set; } = true;
    private bool CanDeleteDrafts { get; set; } = true;
    private bool CanSetAsReadyDrafts { get; set; } = true;
    private CreateUpdateRemittanceDto NewRemittance { get; set; }
    private Guid EditingRemittanceId { get; set; }
    private CreateUpdateRemittanceDto EditingRemittance { get; set; } 
    private Modal CreateRemittanceModal { get; set; }
    private Modal EditRemittanceModal { get; set; }
    private Validations CreateValidationsRef;
    private Validations EditValidationsRef;

    protected override async Task OnInitializedAsync()
    {
        await GetRemittancesAsync();
        NewRemittance = new CreateUpdateRemittanceDto() { Type = RemmitanceType.Internal };
        EditingRemittance = new CreateUpdateRemittanceDto();
        CustomersList = await CustomerAppService.GetAllCustomersAsync();
        CurrenciesList =  await CurrencyAppService.GetAllCurrenciesAsync();
         await SetPermissionsAsync();
    }

    private async Task SetPermissionsAsync()
    {
        CanCreateDrafts = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Remittances.Create);

        CanEditDrafts = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Remittances.Edit);

        CanDeleteDrafts = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Remittances.Delete);

        CanSetAsReadyDrafts = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Remittances.SetAsReady);
    }

    private async Task GetRemittancesAsync()
    {
        var result = await RemittanceAppService.GetIssuedListAsync(
            new PagedAndSortedResultRequestDto
                {
                    MaxResultCount = PageSize,
                    SkipCount = CurrentPage * PageSize,
                    Sorting = CurrentSorting
                }
            );

        RemittanceList = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<RemittanceDto> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page - 1;

        await GetRemittancesAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateRemittanceAsync()
    {
        if (await CreateValidationsRef.ValidateAll())
        {
            await RemittanceAppService.CreateAsync(NewRemittance);
            await GetRemittancesAsync();
            CreateRemittanceModal.Hide();
        }
    }

    private void OpenCreateModal()
    {
        CreateValidationsRef.ClearAll();
        NewRemittance = new CreateUpdateRemittanceDto() { Type = RemmitanceType.Internal };
        CreateRemittanceModal.Show();   
    }

    private void CloseCreateModal()
    {
        CreateRemittanceModal.Hide();
    }

    private async Task UpdateRemittanceAsync()
    {
        if (await EditValidationsRef.ValidateAll())
        {
            await RemittanceAppService.UpdateAsync(EditingRemittanceId, EditingRemittance);
            await GetRemittancesAsync();
            EditRemittanceModal.Hide();
        }
    }

    private void OpenEditModal(RemittanceDto remittance)
    {
        EditValidationsRef.ClearAll();
        EditingRemittanceId = remittance.Id;
        EditingRemittance = ObjectMapper.Map<RemittanceDto, CreateUpdateRemittanceDto>(remittance);
        EditRemittanceModal.Show();
    }

    private void CloseEditModal()
    {
        EditRemittanceModal.Hide();
    }

    private async Task SetRemittanceAsReadyAsync(RemittanceDto remittance)
    {
        await RemittanceAppService.SetAsReadyAsync(remittance.Id);
        await _uiMessageService.Success("The Remittance Set As Ready Successfully");
        await GetRemittancesAsync();
    }

    private async Task DeleteRemittanceAsync(RemittanceDto remittance)
    {
        var confirmMessage = L["RemittanceDeletionConfirmationMessage", remittance.SerialNumber];
        if (!await Message.Confirm(confirmMessage))
        {
            return;
        }
        await RemittanceAppService.DeleteAsync(remittance.Id);
        await GetRemittancesAsync();
    }

}
