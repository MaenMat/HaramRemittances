@page "/remittances/report"
@using Haram.Remittance.Remittances
@using Haram.Remittance.Localization
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.Remittance.Blazor.Pages
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Haram.Remittance.Permissions;
@using Blazorise;
@using Blazorise.DataGrid;
@using Microsoft.AspNetCore.Authorization;
@using Volo.Abp.Application.Dtos;
@using Haram.Remittance.Customers
@using Haram.Remittance.Currencies
@using Haram.Remittance.Remittances
@inherits RemittanceComponentBase
@inject IRemittanceAppService RemittanceAppService
@inject AbpBlazorMessageLocalizerHelper<RemittanceResource> LH
@inject IUiNotificationService _uiNotificationService

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Remittances.Report"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenDateModal">
                    @L["DateRange"]
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ReportRemittanceDto"
                  Data="RemittanceList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="ReportRemittanceDto"
                                Field="@nameof(ReportRemittanceDto.Type)"
                                Caption="@L["RemittanceType"]">
                    <DisplayTemplate>
                        @L[$"Enum:Remittance.Type.{context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ReportRemittanceDto"
                                Field="@nameof(ReportRemittanceDto.SerialNumber)"
                                Caption="@L["SerialNumber"]">
                </DataGridColumn>

                <DataGridColumn TItem="ReportRemittanceDto"
                                Field="@nameof(ReportRemittanceDto.Amount)"
                                Caption="@L["Amount"]">
                </DataGridColumn>

                <DataGridColumn TItem="ReportRemittanceDto"
                                Field="@nameof(ReportRemittanceDto.TotalAmount)"
                                Caption="@L["TotalAmount"]">
                </DataGridColumn>

                <DataGridColumn TItem="ReportRemittanceDto"
                                Field="@nameof(ReportRemittanceDto.SenderFullName)"
                                Caption="@L["SenderFullName"]">
                </DataGridColumn>
                <DataGridColumn TItem="ReportRemittanceDto"
                                Field="@nameof(ReportRemittanceDto.LatestStatusInRange)"
                                Caption="@L["Status"]">
                    <DisplayTemplate>
                        @context.LatestStatusInRange.Status
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="DateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["EnterDateRange"]</ModalTitle>
                <CloseButton Clicked="CloseDateModal" />
            </ModalHeader>
            <ModalBody>
                    <Field>
                        <FieldLabel>@L["StartDate"]</FieldLabel>
                            <DateEdit TValue="DateTime" @bind-Date="@StartDate" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["EndDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="@EndDate" />
                    </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseDateModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="FetchReportList">
                    @L["Fetch"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {

    private IReadOnlyList<ReportRemittanceDto> RemittanceList { get; set; }
    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private Modal DateModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StartDate = DateTime.Now;
        EndDate = DateTime.Now;
    }
    private async Task GetRemittancesAsync()
    {
        if (StartDate != null && EndDate != null && EndDate < StartDate)
        {
            _uiNotificationService.Error("End Date Is Set Before Start Date!");
            return;
        }
        if (StartDate == null && EndDate == null )
        {
            return;
        }
        var result = await RemittanceAppService.GetReportListAsync(StartDate, EndDate,
            new PagedAndSortedResultRequestDto
                {
                    MaxResultCount = PageSize,
                    SkipCount = CurrentPage * PageSize,
                    Sorting = CurrentSorting
                }
            );

        RemittanceList = result.Items;
        TotalCount = (int)result.TotalCount;
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<ReportRemittanceDto> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page - 1;

        await GetRemittancesAsync();

        await InvokeAsync(StateHasChanged);
    }

    private void OpenDateModal()
    {
        DateModal.Show();
    }

    private void CloseDateModal()
    {
        DateModal.Hide();
    }

    private async void FetchReportList()
    {
        await GetRemittancesAsync();
        CloseDateModal();
    }
}
