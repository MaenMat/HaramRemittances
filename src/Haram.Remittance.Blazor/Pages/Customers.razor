@page "/customers"
@using Haram.Remittance.Customers
@using Haram.Remittance.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.Remittance.Blazor.Pages
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Haram.Remittance.Permissions;
@using Blazorise;
@using Blazorise.DataGrid;
@using Microsoft.AspNetCore.Authorization;
@using Volo.Abp.Application.Dtos;
@inherits RemittanceComponentBase
@inject ICustomerAppService CustomerAppService
@inject AbpBlazorMessageLocalizerHelper<RemittanceResource> LH
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Customers"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                    @if (CanCreateCustomer)
                    {
                        <Button Color="Color.Primary"
                                Clicked="OpenCreateCustomerModal">
                            @L["NewCustomer"]
                        </Button>
                    }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="CustomerDto"
                  Data="CustomerList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="CustomerDto"
                                Field="@nameof(CustomerDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditCustomer)
                                {
                                    <DropdownItem Clicked="() => OpenEditCustomerModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }

                                @if (CanDeleteCustomer)
                                {
                                    <DropdownItem Clicked="() => DeleteCustomerAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.FirstName)"
                                Caption="@L["FirstName"]"></DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.LastName)"
                                Caption="@L["LastName"]"></DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.FatherName)"
                                Caption="@L["FatherName"]"></DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.MotherName)"
                                Caption="@L["MotherName"]"></DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.BirthDate)"
                                Caption="@L["BirthDate"]">
                    <DisplayTemplate>
                        @context.BirthDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.Phone)"
                                Caption="@L["PhoneNumber"]"></DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.Gender)"
                                Caption="@L["Gender"]">
                    <DisplayTemplate>
                        @L[$"Enum:Customer.Gender.{context.Gender}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.Address)"
                                Caption="@L["Address"]"></DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="CreateCustomerModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewCustomer"]</ModalTitle>
                <CloseButton Clicked="CloseCreateCustomerModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewCustomer" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FirstName"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCustomer.FirstName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["LastName"]</FieldLabel>
                              <TextEdit @bind-Text="@NewCustomer.LastName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                              </TextEdit>
                        </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FatherName"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCustomer.FatherName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                        </Field>
                    </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["MotherName"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCustomer.MotherName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                    <Field>
                        <FieldLabel>@L["BirthDate"]</FieldLabel>
                            <DateEdit TValue="DateTime" @bind-Date="@NewCustomer.BirthDate" />
                    </Field>
                        </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["PhoneNumber"]</FieldLabel>
                            <TextEdit Rows="5" @bind-Text="@NewCustomer.Phone">
                                    <Feedback>
                                        <ValidationError/>
                                    </Feedback>
                            </TextEdit>
                        </Field>
                        </Validation>
                        <Field>
                                <FieldLabel>@L["Gender"]</FieldLabel>
                                <Select TValue="Gender" @bind-SelectedValue="@NewCustomer.Gender">
                                    @foreach (int gender in Enum.GetValues(typeof(Gender)))
                                {
                                    <SelectItem TValue="Gender" Value="@((Gender) gender)">
                                        @L[$"Enum:Customer.Gender.{gender}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["Address"]</FieldLabel>
                                <MemoEdit Rows="5" @bind-Text="@NewCustomer.Address">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateCustomerModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateCustomerAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="EditCustomerModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                        <ModalTitle>@EditingCustomer.FirstName</ModalTitle>
                        <CloseButton Clicked="CloseEditCustomerModal" />
                    </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@EditingCustomer" ValidateOnLoad="false">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["FirstName"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingCustomer.FirstName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["LastName"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingCustomer.LastName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["FatherName"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingCustomer.FatherName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["MotherName"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingCustomer.MotherName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["BirthDate"]</FieldLabel>
                                <DateEdit TValue="DateTime" @bind-Date="@EditingCustomer.BirthDate" />
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["PhoneNumber"]</FieldLabel>
                                <TextEdit Rows="5" @bind-Text="@EditingCustomer.Phone">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Gender"]</FieldLabel>
                                <Select TValue="Gender" @bind-SelectedValue="@EditingCustomer.Gender">
                                @foreach (int gender in Enum.GetValues(typeof(Gender)))
                            {
                                <SelectItem TValue="Gender" Value="@((Gender) gender)">
                                    @L[$"Enum:Customer.Gender.{gender}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Address"]</FieldLabel>
                                <MemoEdit Rows="5" @bind-Text="@EditingCustomer.Address">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </MemoEdit>
                            </Field>
                    </Validation>
                    </Validations>
                </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditCustomerModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateCustomerAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code
{
    
    private IReadOnlyList<CustomerDto> CustomerList { get; set; }
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private bool CanCreateCustomer { get; set; }
    private bool CanEditCustomer { get; set; }
    private bool CanDeleteCustomer { get; set; }
    private CreateCustomerDto NewCustomer { get; set; }
    private Guid EditingCustomerId { get; set; }
    private UpdateCustomerDto EditingCustomer { get; set; }
    private Modal CreateCustomerModal { get; set; }
    private Modal EditCustomerModal { get; set; }
    private Validations CreateValidationsRef;
    private Validations EditValidationsRef;

    protected override async Task OnInitializedAsync()
    {
        NewCustomer = new CreateCustomerDto();
        EditingCustomer = new UpdateCustomerDto();
        await SetPermissionsAsync();
        await GetCustomersAsync();
    }

    private async Task SetPermissionsAsync()
    {
        CanCreateCustomer = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Customers.Create);

        CanEditCustomer = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Customers.Edit);

        CanDeleteCustomer = await AuthorizationService
            .IsGrantedAsync(RemittancePermissions.Customers.Delete);
    }

    private async Task GetCustomersAsync()
    {
        var result = await CustomerAppService.GetListAsync(
            new GetCustomerListDto
                {
                    MaxResultCount = PageSize,
                    SkipCount = CurrentPage * PageSize,
                    Sorting = CurrentSorting
                }
        );

        CustomerList = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<CustomerDto> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page - 1;

        await GetCustomersAsync();

        await InvokeAsync(StateHasChanged);
    }

    private void OpenCreateCustomerModal()
    {
        CreateValidationsRef.ClearAll();
        NewCustomer = new CreateCustomerDto();
        CreateCustomerModal.Show();
    }

    private void CloseCreateCustomerModal()
    {
        CreateCustomerModal.Hide();
    }

    private void OpenEditCustomerModal(CustomerDto customer)
    {
        EditValidationsRef.ClearAll();
        EditingCustomerId = customer.Id;
        EditingCustomer = ObjectMapper.Map<CustomerDto, UpdateCustomerDto>(customer);
        EditCustomerModal.Show();
    }

    private void CloseEditCustomerModal()
    {
        EditCustomerModal.Hide();
    }


    private async Task CreateCustomerAsync()
    {
        if (await CreateValidationsRef.ValidateAll())
        {
            await CustomerAppService.CreateAsync(NewCustomer);
            await GetCustomersAsync();
            CreateCustomerModal.Hide();
        }
    }

    private async Task UpdateCustomerAsync()
    {
        if (await EditValidationsRef.ValidateAll())
        // if (true)
        {
            await CustomerAppService.UpdateAsync(EditingCustomerId, EditingCustomer);
            await GetCustomersAsync();
            EditCustomerModal.Hide();
        }
    }

    private async Task DeleteCustomerAsync(CustomerDto customer)
    {
        var confirmMessage = L["CustomerDeletionConfirmationMessage", customer.FirstName +" "+ customer.LastName];
        if (!await Message.Confirm(confirmMessage))
        {
            return;
        }

        await CustomerAppService.DeleteAsync(customer.Id);
        await GetCustomersAsync();
    }
}
